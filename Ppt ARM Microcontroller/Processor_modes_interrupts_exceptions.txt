

1. Thread Mode (Un-Privileged Mode) :-- User Applications.. (User Mode)

CONTROL register :-- Used for Thread mode to drive the thread mode
 acsess either as Privileged or Unprivilged and also used for
deciding the SP -- MSP/PSP

2. Handler Mode (Privileged Mode) :-- Used for executing (Kernel mode)
Exceptions/Interrupts..

No role of CONTROL register here --
Always 1) Privileged access
       2) MSP


CONTROL --- 0X00 ; // THREAD mode is in Privileged access level with MSP...

CONTROL = 0X03;

MOV32 R0,#0X20001000
MSR PSP,R0 ; WTITE

MRS R0,PSR ; READ



MOV R1,#0X03
MSR CONTROL,R1 ; THREAD mode will be in un-privleged access and PSP is the Stack Pointeter...



PSP :-- process stack pointer -- used by processes -- like tasks, threads, process etc. or by any routine...

MSP :-- Main stack pointer --- Used by handler mode for system related routines like interrupt/exception handler, OS routines...


interrupt :-- Signal generated by peripheral to CPU for executing a dedicated routine called as ISR.
-- Signal is generated based on an event...


Exception :- Run time errors like bus errors, mem faults, mem access violations
Run time errors encountered by CPU...

Interrupt/Excpetion occurs :-- CPU executes the corresponding ISR by fetching the vector address from IVT...
paralley following registers are being saved by the CPU on stack...

1) R0-R3

2) R12, R14

3) PSR, PC

Interrupt Latency :-- Time taken by CPU to execute the first instruction of ISR from the time the interrupt signal was received..
 
When you get interrupt or Exception the following registers are pushed opnto the stack in this order

PUSH {R0-R3, R12,R14,PC,PSR} --- DONE BY HARDWARE....

1) PSR
2) PC
3) R14
4) R12
5) R3
6) R2
7) R1
8) R0

These regiyers are popped out to the their respective refisters once return from interrupt happens

POP {R0-R3, R12,R14,PC,PSR} --- DONE BY A dedicated return from interrupt instruction...



























